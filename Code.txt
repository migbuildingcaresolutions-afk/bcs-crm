<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Building Care Solutions - Invoice & Customer Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            text-align: center;
        }

        .company-info {
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            align-items: center;
            gap: 20px;
        }

        .company-details {
            text-align: left;
        }

        .company-logo {
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
        }

        .company-contact {
            text-align: right;
        }

        .nav-tabs {
            display: flex;
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .nav-tab {
            flex: 1;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            background: white;
            font-size: 16px;
            font-weight: 600;
        }

        .nav-tab.active {
            background: #667eea;
            color: white;
        }

        .nav-tab:hover:not(.active) {
            background: #f8f9fa;
        }

        .tab-content {
            display: none;
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .tab-content.active {
            display: block;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a6fd8;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .table th,
        .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }

        .table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #555;
        }

        .table tbody tr:hover {
            background: #f8f9fa;
        }

        .line-items {
            margin-top: 30px;
        }

        .line-item {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr auto;
            gap: 15px;
            align-items: end;
            margin-bottom: 15px;
            padding: 15px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
        }

        .totals {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
        }

        .totals-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .totals-row.total {
            font-weight: bold;
            font-size: 1.2em;
            border-top: 2px solid #667eea;
            padding-top: 10px;
        }

        .invoice-preview {
            background: white;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-top: 30px;
        }

        .invoice-header {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            margin-bottom: 40px;
        }

        .invoice-info h3 {
            color: #667eea;
            margin-bottom: 15px;
        }

        .legal-disclaimer {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 30px;
            font-size: 12px;
            line-height: 1.5;
            color: #666;
        }

        .search-box {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .search-box input {
            flex: 1;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-draft { background: #ffc107; color: #000; }
        .status-sent { background: #17a2b8; color: white; }
        .status-paid { background: #28a745; color: white; }
        .status-overdue { background: #dc3545; color: white; }

        /* Smart Estimator Styles */
        .trade-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .trade-checkbox {
            display: flex;
            align-items: center;
            padding: 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .trade-checkbox:hover {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .trade-checkbox input[type="checkbox"] {
            margin-right: 10px;
            transform: scale(1.2);
        }

        .trade-checkbox input[type="checkbox"]:checked + span {
            color: #667eea;
            font-weight: 600;
        }

        .trade-section {
            display: none;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .trade-section.active {
            display: block;
        }

        .estimate-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .estimate-summary {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 30px;
        }

        .estimate-line {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #ddd;
        }

        .estimate-totals {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
        }

        @media print {
            body * { visibility: hidden; }
            .invoice-preview, .invoice-preview * { visibility: visible; }
            .invoice-preview { position: absolute; left: 0; top: 0; width: 100%; }
            .btn { display: none; }
        }

        @media (max-width: 768px) {
            .company-info {
                grid-template-columns: 1fr;
                text-align: center;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .line-item {
                grid-template-columns: 1fr;
            }
            
            .invoice-header {
                grid-template-columns: 1fr;
            }

            .trade-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="company-info">
                <div class="company-details">
                    <h1 style="color: #667eea; margin-bottom: 10px;">Building Care Solutions</h1>
                    <p>8889 Caminito Plaza Centro #7117<br>
                    San Diego, CA 92122</p>
                </div>
                <div class="company-logo">
                    <!-- TO CHANGE YOUR LOGO: Replace this entire SVG with your own logo image or SVG code -->
                    <!-- Option 1: Use an image instead: <img src="your-logo.png" alt="Company Logo" style="max-width: 150px; max-height: 100px;"> -->
                    <!-- Option 2: Modify the SVG below or replace with your own SVG code -->
                    <svg width="120" height="80" viewBox="0 0 300 200" xmlns="http://www.w3.org/2000/svg">
                        <!-- Sun rays -->
                        <g stroke="#667eea" stroke-width="3" fill="none">
                            <line x1="150" y1="20" x2="150" y2="35" />
                            <line x1="190" y1="30" x2="185" y2="43" />
                            <line x1="220" y1="50" x2="210" y2="58" />
                            <line x1="240" y1="80" x2="227" y2="85" />
                            <line x1="250" y1="115" x2="235" y2="115" />
                            <line x1="240" y1="150" x2="227" y2="145" />
                            <line x1="220" y1="180" x2="210" y2="172" />
                            <line x1="190" y1="200" x2="185" y2="187" />
                            <line x1="150" y1="210" x2="150" y2="195" />
                            <line x1="110" y1="200" x2="115" y2="187" />
                            <line x1="80" y1="180" x2="90" y2="172" />
                            <line x1="60" y1="150" x2="73" y2="145" />
                            <line x1="50" y1="115" x2="65" y2="115" />
                            <line x1="60" y1="80" x2="73" y2="85" />
                            <line x1="80" y1="50" x2="90" y2="58" />
                            <line x1="110" y1="30" x2="115" y2="43" />
                        </g>
                        
                        <!-- House structure -->
                        <g fill="#667eea" stroke="#667eea" stroke-width="2">
                            <!-- House base -->
                            <rect x="90" y="130" width="120" height="50" />
                            
                            <!-- Roof -->
                            <polygon points="80,130 150,90 220,130" />
                            
                            <!-- Door -->
                            <rect x="130" y="150" width="15" height="30" fill="white" />
                            
                            <!-- Windows -->
                            <rect x="100" y="145" width="15" height="15" fill="white" />
                            <rect x="185" y="145" width="15" height="15" fill="white" />
                        </g>
                        
                        <!-- Hammer and wrench crossed -->
                        <g stroke="#667eea" stroke-width="3" fill="#667eea">
                            <!-- Hammer -->
                            <rect x="140" y="105" width="4" height="25" transform="rotate(45 142 117)" />
                            <rect x="138" y="103" width="8" height="6" transform="rotate(45 142 106)" />
                            
                            <!-- Wrench -->
                            <rect x="156" y="105" width="4" height="25" transform="rotate(-45 158 117)" />
                            <circle cx="158" cy="108" r="3" fill="none" stroke-width="2" transform="rotate(-45 158 108)" />
                        </g>
                        
                        <!-- Center circle with hand -->
                        <circle cx="150" cy="115" r="25" fill="white" stroke="#667eea" stroke-width="3" />
                        <g stroke="#667eea" stroke-width="2" fill="none">
                            <!-- Hand outline -->
                            <path d="M 140 120 Q 145 110 150 115 Q 155 110 160 120 L 158 125 Q 155 130 150 125 Q 145 130 142 125 Z" />
                        </g>
                    </svg>
                </div>
                <div class="company-contact">
                    <p><strong>Phone:</strong> (858) 737-8499</p>
                    <p><strong>Email:</strong> mig.buildingcaresolutions@gmail.com</p>
                    <p>bcs_1nvoice@outlook.com</p>
                </div>
            </div>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('customers')">Customer Database</button>
            <button class="nav-tab" onclick="showTab('estimator')">Smart Estimator</button>
            <button class="nav-tab" onclick="showTab('quotes')">Create Quote</button>
            <button class="nav-tab" onclick="showTab('invoices')">Create Invoice</button>
            <button class="nav-tab" onclick="showTab('tracker')">Job Tracker</button>
        </div>

        <!-- Smart Estimator Tab -->
        <div id="estimator" class="tab-content">
            <h2>Smart Estimator - San Diego Pricing</h2>
            <form id="estimatorForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label>Project Name</label>
                        <input type="text" id="projectName" placeholder="Enter project name" required>
                    </div>
                    <div class="form-group">
                        <label>Customer</label>
                        <select id="estimateCustomer" required>
                            <option value="">Select Customer</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Property Type</label>
                        <select id="propertyType">
                            <option value="residential">Residential</option>
                            <option value="commercial">Commercial</option>
                            <option value="industrial">Industrial</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Project Type</label>
                        <select id="projectType">
                            <option value="water_damage">Water Damage Remediation</option>
                            <option value="remodel">Remodel/Renovation</option>
                            <option value="repair">Repair Work</option>
                            <option value="maintenance">Maintenance</option>
                            <option value="new_construction">New Construction</option>
                        </select>
                    </div>
                </div>

                <div class="estimator-sections">
                    <h3>Select Work Categories</h3>
                    <div class="trade-selector">
                        <div class="trade-grid">
                            <label class="trade-checkbox">
                                <input type="checkbox" value="water_remediation" onchange="toggleTradeSection(this)">
                                <span>💧 Water Remediation</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="drywall" onchange="toggleTradeSection(this)">
                                <span>🧱 Drywall</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="painting" onchange="toggleTradeSection(this)">
                                <span>🎨 Painting</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="flooring" onchange="toggleTradeSection(this)">
                                <span>🏠 Flooring</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="carpentry" onchange="toggleTradeSection(this)">
                                <span>🔨 Carpentry</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="electrical" onchange="toggleTradeSection(this)">
                                <span>⚡ Electrical</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="plumbing" onchange="toggleTradeSection(this)">
                                <span>🔧 Plumbing</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="cabinets" onchange="toggleTradeSection(this)">
                                <span>🗄️ Cabinets</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="countertops" onchange="toggleTradeSection(this)">
                                <span>🏢 Countertops</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="concrete" onchange="toggleTradeSection(this)">
                                <span>🏗️ Concrete</span>
                            </label>
                            <label class="trade-checkbox">
                                <input type="checkbox" value="stucco" onchange="toggleTradeSection(this)">
                                <span>🏘️ Stucco</span>
                            </label>
                        </div>
                    </div>

                    <!-- Trade-specific sections will be dynamically added here -->
                    <div id="tradeDetails"></div>
                </div>

                <div class="estimate-summary" id="estimateSummary" style="display: none;">
                    <h3>Estimate Summary</h3>
                    <div id="estimateBreakdown"></div>
                    <div class="estimate-totals" id="estimateTotals"></div>
                </div>

                <div style="margin-top: 30px;">
                    <button type="button" class="btn btn-primary" onclick="calculateEstimate()">Calculate Estimate</button>
                    <button type="button" class="btn btn-success" onclick="convertToQuote()">Convert to Quote</button>
                    <button type="button" class="btn btn-secondary" onclick="clearEstimator()">Clear</button>
                </div>
            </form>
        </div>

        <div id="customers" class="tab-content active">
            <h2>Customer Database</h2>
            <div class="search-box">
                <input type="text" id="customerSearch" placeholder="Search customers..." onkeyup="searchCustomers()">
                <button class="btn btn-primary" onclick="showAddCustomerModal()">Add New Customer</button>
            </div>
            <table class="table" id="customersTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Company</th>
                        <th>Phone</th>
                        <th>Email</th>
                        <th>Address</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <!-- Create Quote Tab -->
        <div id="quotes" class="tab-content">
            <h2>Create Quote</h2>
            <form id="quoteForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label>Quote Number</label>
                        <input type="text" id="quoteNumber" readonly>
                    </div>
                    <div class="form-group">
                        <label>Date</label>
                        <input type="date" id="quoteDate" required>
                    </div>
                    <div class="form-group">
                        <label>Customer</label>
                        <select id="quoteCustomer" required>
                            <option value="">Select Customer</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Valid Until</label>
                        <input type="date" id="quoteValidUntil" required>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Project Description</label>
                    <textarea id="quoteDescription" rows="3" placeholder="Describe the project scope and requirements..."></textarea>
                </div>

                <div class="line-items">
                    <h3>Line Items</h3>
                    <div id="quoteLineItems"></div>
                    <button type="button" class="btn btn-secondary" onclick="addLineItem('quote')">Add Line Item</button>
                </div>

                <div class="totals" id="quoteTotals"></div>

                <div style="margin-top: 30px;">
                    <button type="submit" class="btn btn-primary">Generate Quote</button>
                    <button type="button" class="btn btn-secondary" onclick="clearForm('quote')">Clear Form</button>
                </div>
            </form>
        </div>

        <!-- Create Invoice Tab -->
        <div id="invoices" class="tab-content">
            <h2>Create Invoice</h2>
            <form id="invoiceForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label>Invoice Number</label>
                        <input type="text" id="invoiceNumber" readonly>
                    </div>
                    <div class="form-group">
                        <label>Date</label>
                        <input type="date" id="invoiceDate" required>
                    </div>
                    <div class="form-group">
                        <label>Customer</label>
                        <select id="invoiceCustomer" required>
                            <option value="">Select Customer</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Due Date</label>
                        <input type="date" id="invoiceDueDate" required>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Work Description</label>
                    <textarea id="invoiceDescription" rows="3" placeholder="Describe the work completed..."></textarea>
                </div>

                <div class="line-items">
                    <h3>Line Items</h3>
                    <div id="invoiceLineItems"></div>
                    <button type="button" class="btn btn-secondary" onclick="addLineItem('invoice')">Add Line Item</button>
                </div>

                <div class="totals" id="invoiceTotals"></div>

                <div style="margin-top: 30px;">
                    <button type="submit" class="btn btn-primary">Generate Invoice</button>
                    <button type="button" class="btn btn-secondary" onclick="clearForm('invoice')">Clear Form</button>
                </div>
            </form>
        </div>

        <!-- Job Tracker Tab -->
        <div id="tracker" class="tab-content">
            <h2>Job Tracker</h2>
            <div class="search-box">
                <input type="text" id="jobSearch" placeholder="Search jobs..." onkeyup="searchJobs()">
                <select id="statusFilter" onchange="filterJobs()">
                    <option value="">All Status</option>
                    <option value="draft">Draft</option>
                    <option value="sent">Sent</option>
                    <option value="paid">Paid</option>
                    <option value="overdue">Overdue</option>
                </select>
            </div>
            <table class="table" id="jobsTable">
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Type</th>
                        <th>Customer</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <!-- Customer Modal -->
    <div id="customerModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('customerModal')">&times;</span>
            <h2 id="customerModalTitle">Add New Customer</h2>
            <form id="customerForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label>First Name *</label>
                        <input type="text" id="customerFirstName" required>
                    </div>
                    <div class="form-group">
                        <label>Last Name *</label>
                        <input type="text" id="customerLastName" required>
                    </div>
                    <div class="form-group">
                        <label>Company</label>
                        <input type="text" id="customerCompany">
                    </div>
                    <div class="form-group">
                        <label>Phone *</label>
                        <input type="tel" id="customerPhone" required>
                    </div>
                    <div class="form-group">
                        <label>Email *</label>
                        <input type="email" id="customerEmail" required>
                    </div>
                    <div class="form-group">
                        <label>Address</label>
                        <input type="text" id="customerAddress">
                    </div>
                    <div class="form-group">
                        <label>City</label>
                        <input type="text" id="customerCity">
                    </div>
                    <div class="form-group">
                        <label>State</label>
                        <input type="text" id="customerState">
                    </div>
                    <div class="form-group">
                        <label>ZIP Code</label>
                        <input type="text" id="customerZip">
                    </div>
                </div>
                <div class="form-group">
                    <label>Notes</label>
                    <textarea id="customerNotes" rows="3"></textarea>
                </div>
                <div style="margin-top: 20px;">
                    <button type="submit" class="btn btn-primary">Save Customer</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal('customerModal')">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    // Global variables
let customers = JSON.parse(localStorage.getItem('customers')) || [];
let invoices = JSON.parse(localStorage.getItem('invoices')) || [];
let quotes = JSON.parse(localStorage.getItem('quotes')) || [];
let workOrders = JSON.parse(localStorage.getItem('workOrders')) || [];
let currentEditingCustomerId = null;
let nextInvoiceNumber = parseInt(localStorage.getItem('nextInvoiceNumber')) || 1001;
let nextQuoteNumber = parseInt(localStorage.getItem('nextQuoteNumber')) || 2001;
let nextWorkOrderNumber = parseInt(localStorage.getItem('nextWorkOrderNumber')) || 3001;

// San Diego pricing data for Smart Estimator
const pricingData = {
    water_remediation: {
        'Water Extraction (per sq ft)': { min: 3.50, max: 5.00, unit: 'sq ft' },
        'Dehumidification (per day)': { min: 35, max: 75, unit: 'day' },
        'Antimicrobial Treatment': { min: 2.50, max: 4.00, unit: 'sq ft' },
        'Air Scrubber Rental': { min: 125, max: 200, unit: 'day' }
    },
    drywall: {
        'Drywall Installation': { min: 1.80, max: 2.50, unit: 'sq ft' },
        'Drywall Repair': { min: 150, max: 300, unit: 'patch' },
        'Texture Matching': { min: 2.00, max: 3.50, unit: 'sq ft' },
        'Drywall Removal': { min: 1.25, max: 2.00, unit: 'sq ft' }
    },
    painting: {
        'Interior Painting': { min: 2.50, max: 4.50, unit: 'sq ft' },
        'Exterior Painting': { min: 3.00, max: 5.50, unit: 'sq ft' },
        'Primer Application': { min: 1.50, max: 2.50, unit: 'sq ft' },
        'Trim Painting': { min: 3.00, max: 6.00, unit: 'linear ft' }
    },
    flooring: {
        'Tile Installation': { min: 8.00, max: 15.00, unit: 'sq ft' },
        'Hardwood Installation': { min: 12.00, max: 20.00, unit: 'sq ft' },
        'Vinyl/LVP Installation': { min: 6.00, max: 12.00, unit: 'sq ft' },
        'Carpet Installation': { min: 4.00, max: 8.00, unit: 'sq ft' },
        'Floor Removal': { min: 2.00, max: 4.00, unit: 'sq ft' }
    },
    carpentry: {
        'Framing (per linear ft)': { min: 8.00, max: 15.00, unit: 'linear ft' },
        'Custom Shelving': { min: 150, max: 400, unit: 'shelf' },
        'Door Installation': { min: 200, max: 500, unit: 'door' },
        'Window Installation': { min: 300, max: 800, unit: 'window' },
        'Baseboard Installation': { min: 6.00, max: 12.00, unit: 'linear ft' }
    },
    electrical: {
        'Outlet Installation': { min: 125, max: 200, unit: 'outlet' },
        'Light Fixture Installation': { min: 150, max: 300, unit: 'fixture' },
        'Ceiling Fan Installation': { min: 200, max: 350, unit: 'fan' },
        'Panel Upgrade': { min: 1500, max: 3000, unit: 'panel' }
    },
    plumbing: {
        'Pipe Repair': { min: 200, max: 400, unit: 'repair' },
        'Fixture Installation': { min: 250, max: 500, unit: 'fixture' },
        'Water Heater Installation': { min: 1200, max: 2500, unit: 'unit' },
        'Drain Cleaning': { min: 150, max: 300, unit: 'drain' }
    },
    cabinets: {
        'Cabinet Installation': { min: 150, max: 300, unit: 'linear ft' },
        'Cabinet Refacing': { min: 100, max: 200, unit: 'linear ft' },
        'Custom Cabinet Build': { min: 200, max: 500, unit: 'linear ft' }
    },
    countertops: {
        'Granite Countertops': { min: 60, max: 120, unit: 'sq ft' },
        'Quartz Countertops': { min: 70, max: 130, unit: 'sq ft' },
        'Butcher Block': { min: 40, max: 80, unit: 'sq ft' }
    },
    concrete: {
        'Concrete Pour': { min: 8.00, max: 15.00, unit: 'sq ft' },
        'Concrete Repair': { min: 12.00, max: 25.00, unit: 'sq ft' },
        'Stamped Concrete': { min: 15.00, max: 25.00, unit: 'sq ft' }
    },
    stucco: {
        'Stucco Application': { min: 6.00, max: 12.00, unit: 'sq ft' },
        'Stucco Repair': { min: 8.00, max: 15.00, unit: 'sq ft' },
        'Stucco Removal': { min: 4.00, max: 8.00, unit: 'sq ft' }
    }
};

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    initializeInvoiceNumber();
    initializeQuoteNumber();
    initializeWorkOrderNumber();
    loadCustomers();
    loadJobs();
    populateCustomerDropdowns();
    
    // Set default dates
    const today = new Date().toISOString().split('T')[0];
    const futureDate = new Date();
    futureDate.setDate(futureDate.getDate() + 30);
    const futureFormattedDate = futureDate.toISOString().split('T')[0];
    
    document.getElementById('invoiceDate').value = today;
    document.getElementById('quoteDate').value = today;
    document.getElementById('invoiceDueDate').value = futureFormattedDate;
    document.getElementById('quoteValidUntil').value = futureFormattedDate;
    
    if (document.getElementById('workOrderDate')) {
        document.getElementById('workOrderDate').value = today;
    }
});

// Tab Management
function showTab(tabName) {
    // Hide all tab contents
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach(tab => tab.classList.remove('active'));
    
    // Remove active class from all tabs
    const tabs = document.querySelectorAll('.nav-tab');
    tabs.forEach(tab => tab.classList.remove('active'));
    
    // Show selected tab
    document.getElementById(tabName).classList.add('active');
    event.target.classList.add('active');
}

// Customer Management
function showAddCustomerModal() {
    currentEditingCustomerId = null;
    document.getElementById('customerModalTitle').textContent = 'Add New Customer';
    document.getElementById('customerForm').reset();
    document.getElementById('customerModal').style.display = 'block';
}

function editCustomer(id) {
    const customer = customers.find(c => c.id === id);
    if (customer) {
        currentEditingCustomerId = id;
        document.getElementById('customerModalTitle').textContent = 'Edit Customer';
        document.getElementById('customerFirstName').value = customer.firstName;
        document.getElementById('customerLastName').value = customer.lastName;
        document.getElementById('customerCompany').value = customer.company || '';
        document.getElementById('customerPhone').value = customer.phone;
        document.getElementById('customerEmail').value = customer.email;
        document.getElementById('customerAddress').value = customer.address || '';
        document.getElementById('customerCity').value = customer.city || '';
        document.getElementById('customerState').value = customer.state || '';
        document.getElementById('customerZip').value = customer.zip || '';
        document.getElementById('customerNotes').value = customer.notes || '';
        document.getElementById('customerModal').style.display = 'block';
    }
}

function deleteCustomer(id) {
    if (confirm('Are you sure you want to delete this customer?')) {
        customers = customers.filter(c => c.id !== id);
        localStorage.setItem('customers', JSON.stringify(customers));
        loadCustomers();
        populateCustomerDropdowns();
    }
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// Customer form submission
document.getElementById('customerForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const customerData = {
        firstName: document.getElementById('customerFirstName').value,
        lastName: document.getElementById('customerLastName').value,
        company: document.getElementById('customerCompany').value,
        phone: document.getElementById('customerPhone').value,
        email: document.getElementById('customerEmail').value,
        address: document.getElementById('customerAddress').value,
        city: document.getElementById('customerCity').value,
        state: document.getElementById('customerState').value,
        zip: document.getElementById('customerZip').value,
        notes: document.getElementById('customerNotes').value
    };
    
    if (currentEditingCustomerId) {
        // Update existing customer
        const index = customers.findIndex(c => c.id === currentEditingCustomerId);
        customers[index] = { ...customers[index], ...customerData };
    } else {
        // Add new customer
        customerData.id = Date.now();
        customers.push(customerData);
    }
    
    localStorage.setItem('customers', JSON.stringify(customers));
    loadCustomers();
    populateCustomerDropdowns();
    closeModal('customerModal');
});

function loadCustomers() {
    const tbody = document.querySelector('#customersTable tbody');
    tbody.innerHTML = '';
    
    customers.forEach(customer => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${customer.firstName} ${customer.lastName}</td>
            <td>${customer.company || '-'}</td>
            <td>${customer.phone}</td>
            <td>${customer.email}</td>
            <td>${customer.address || '-'}</td>
            <td>
                <button class="btn btn-secondary" onclick="editCustomer(${customer.id})">Edit</button>
                <button class="btn btn-danger" onclick="deleteCustomer(${customer.id})">Delete</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function searchCustomers() {
    const searchTerm = document.getElementById('customerSearch').value.toLowerCase();
    const rows = document.querySelectorAll('#customersTable tbody tr');
    
    rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? '' : 'none';
    });
}

function populateCustomerDropdowns() {
    const dropdowns = ['invoiceCustomer', 'quoteCustomer', 'estimateCustomer'];
    if (document.getElementById('workOrderCustomer')) {
        dropdowns.push('workOrderCustomer');
    }
    
    dropdowns.forEach(dropdownId => {
        const dropdown = document.getElementById(dropdownId);
        if (dropdown) {
            dropdown.innerHTML = '<option value="">Select Customer</option>';
            customers.forEach(customer => {
                const option = document.createElement('option');
                option.value = customer.id;
                option.textContent = `${customer.firstName} ${customer.lastName}${customer.company ? ' (' + customer.company + ')' : ''}`;
                dropdown.appendChild(option);
            });
        }
    });
}

// Smart Estimator Functions
function toggleTradeSection(checkbox) {
    const tradeValue = checkbox.value;
    const tradeDetails = document.getElementById('tradeDetails');
    
    if (checkbox.checked) {
        // Create trade section
        const section = document.createElement('div');
        section.className = 'trade-section active';
        section.id = `section-${tradeValue}`;
        
        let html = `<h4>${tradeValue.replace('_', ' ').toUpperCase()}</h4>`;
        html += '<div class="estimate-grid">';
        
        if (pricingData[tradeValue]) {
            Object.keys(pricingData[tradeValue]).forEach(item => {
                const pricing = pricingData[tradeValue][item];
                html += `
                    <div class="form-group">
                        <label>${item} ($${pricing.min}-$${pricing.max}/${pricing.unit})</label>
                        <input type="number" 
                               id="${tradeValue}_${item.replace(/[^a-zA-Z0-9]/g, '_')}_qty" 
                               placeholder="Quantity (${pricing.unit})"
                               min="0" step="0.1"
                               onchange="updateEstimate()">
                    </div>
                `;
            });
        }
        
        html += '</div>';
        section.innerHTML = html;
        tradeDetails.appendChild(section);
    } else {
        // Remove trade section
        const section = document.getElementById(`section-${tradeValue}`);
        if (section) {
            section.remove();
        }
    }
    updateEstimate();
}

function updateEstimate() {
    calculateEstimate();
}

function calculateEstimate() {
    const checkedTrades = document.querySelectorAll('input[type="checkbox"]:checked');
    let totalMin = 0;
    let totalMax = 0;
    let breakdown = [];
    
    checkedTrades.forEach(checkbox => {
        const tradeValue = checkbox.value;
        const tradeData = pricingData[tradeValue];
        
        if (tradeData) {
            let tradeMin = 0;
            let tradeMax = 0;
            let tradeItems = [];
            
            Object.keys(tradeData).forEach(item => {
                const pricing = tradeData[item];
                const qtyInput = document.getElementById(`${tradeValue}_${item.replace(/[^a-zA-Z0-9]/g, '_')}_qty`);
                
                if (qtyInput && qtyInput.value > 0) {
                    const qty = parseFloat(qtyInput.value);
                    const itemMin = qty * pricing.min;
                    const itemMax = qty * pricing.max;
                    
                    tradeMin += itemMin;
                    tradeMax += itemMax;
                    
                    tradeItems.push({
                        name: item,
                        qty: qty,
                        unit: pricing.unit,
                        min: itemMin,
                        max: itemMax
                    });
                }
            });
            
            if (tradeItems.length > 0) {
                breakdown.push({
                    trade: tradeValue.replace('_', ' ').toUpperCase(),
                    items: tradeItems,
                    min: tradeMin,
                    max: tradeMax
                });
                
                totalMin += tradeMin;
                totalMax += tradeMax;
            }
        }
    });
    
    if (breakdown.length > 0) {
        displayEstimateBreakdown(breakdown, totalMin, totalMax);
        document.getElementById('estimateSummary').style.display = 'block';
    } else {
        document.getElementById('estimateSummary').style.display = 'none';
    }
}

function displayEstimateBreakdown(breakdown, totalMin, totalMax) {
    const breakdownDiv = document.getElementById('estimateBreakdown');
    const totalsDiv = document.getElementById('estimateTotals');
    
    let html = '';
    breakdown.forEach(trade => {
        html += `<div class="estimate-line"><strong>${trade.trade}</strong><span>$${trade.min.toFixed(2)} - $${trade.max.toFixed(2)}</span></div>`;
        trade.items.forEach(item => {
            html += `<div class="estimate-line" style="margin-left: 20px;">${item.name} (${item.qty} ${item.unit})<span>$${item.min.toFixed(2)} - $${item.max.toFixed(2)}</span></div>`;
        });
    });
    
    breakdownDiv.innerHTML = html;
    
    totalsDiv.innerHTML = `
        <div class="totals-row total">
            <span>TOTAL ESTIMATE RANGE:</span>
            <span>$${totalMin.toFixed(2)} - $${totalMax.toFixed(2)}</span>
        </div>
        <div class="totals-row">
            <span>Average Estimate:</span>
            <span>$${((totalMin + totalMax) / 2).toFixed(2)}</span>
        </div>
    `;
}

function convertToQuote() {
    const projectName = document.getElementById('projectName').value;
    const customerId = document.getElementById('estimateCustomer').value;
    
    if (!projectName || !customerId) {
        alert('Please enter project name and select customer');
        return;
    }
    
    // Switch to quotes tab
    showTab('quotes');
    document.querySelector('[onclick="showTab(\'quotes\')"]').click();
    
    // Fill quote form with estimate data
    document.getElementById('quoteCustomer').value = customerId;
    document.getElementById('quoteDescription').value = projectName;
    
    // Convert estimate to line items
    const checkedTrades = document.querySelectorAll('input[type="checkbox"]:checked');
    const quoteLineItems = document.getElementById('quoteLineItems');
    quoteLineItems.innerHTML = '';
    
    checkedTrades.forEach(checkbox => {
        const tradeValue = checkbox.value;
        const tradeData = pricingData[tradeValue];
        
        if (tradeData) {
            Object.keys(tradeData).forEach(item => {
                const pricing = tradeData[item];
                const qtyInput = document.getElementById(`${tradeValue}_${item.replace(/[^a-zA-Z0-9]/g, '_')}_qty`);
                
                if (qtyInput && qtyInput.value > 0) {
                    const qty = parseFloat(qtyInput.value);
                    const avgPrice = (pricing.min + pricing.max) / 2;
                    
                    addLineItem('quote');
                    const lastLineItem = quoteLineItems.lastElementChild;
                    lastLineItem.querySelector('input[placeholder="Description"]').value = item;
                    lastLineItem.querySelector('input[placeholder="Quantity"]').value = qty;
                    lastLineItem.querySelector('input[placeholder="Rate"]').value = avgPrice.toFixed(2);
                    calculateLineTotal(lastLineItem);
                }
            });
        }
    });
    
    calculateTotals('quote');
}

function clearEstimator() {
    document.getElementById('estimatorForm').reset();
    document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
        cb.checked = false;
        toggleTradeSection(cb);
    });
    document.getElementById('tradeDetails').innerHTML = '';
    document.getElementById('estimateSummary').style.display = 'none';
}

// Line Items Management
function addLineItem(type) {
    const container = document.getElementById(`${type}LineItems`);
    const lineItem = document.createElement('div');
    lineItem.className = 'line-item';
    lineItem.innerHTML = `
        <div class="form-group">
            <label>Description</label>
            <input type="text" placeholder="Description" onchange="calculateLineTotal(this.parentElement.parentElement)">
        </div>
        <div class="form-group">
            <label>Quantity</label>
            <input type="number" placeholder="Quantity" min="0" step="0.01" onchange="calculateLineTotal(this.parentElement.parentElement)">
        </div>
        <div class="form-group">
            <label>Rate</label>
            <input type="number" placeholder="Rate" min="0" step="0.01" onchange="calculateLineTotal(this.parentElement.parentElement)">
        </div>
        <div class="form-group">
            <label>Total</label>
            <input type="number" placeholder="0.00" readonly>
        </div>
        <div>
            <button type="button" class="btn btn-danger" onclick="removeLineItem(this)">Remove</button>
        </div>
    `;
    container.appendChild(lineItem);
}

function removeLineItem(button) {
    const lineItem = button.parentElement.parentElement;
    const type = lineItem.closest('.tab-content').id;
    lineItem.remove();
    calculateTotals(type);
}

function calculateLineTotal(lineItem) {
    const quantity = parseFloat(lineItem.children[1].querySelector('input').value) || 0;
    const rate = parseFloat(lineItem.children[2].querySelector('input').value) || 0;
    const total = quantity * rate;
    lineItem.children[3].querySelector('input').value = total.toFixed(2);
    
    const type = lineItem.closest('.tab-content').id;
    calculateTotals(type);
}

function calculateTotals(type) {
    const container = document.getElementById(`${type}LineItems`);
    const lineItems = container.querySelectorAll('.line-item');
    let subtotal = 0;
    
    lineItems.forEach(item => {
        const total = parseFloat(item.children[3].querySelector('input').value) || 0;
        subtotal += total;
    });
    
    const tax = subtotal * 0.0775; // 7.75% San Diego tax rate
    const total = subtotal + tax;
    
    const totalsContainer = document.getElementById(`${type}Totals`);
    totalsContainer.innerHTML = `
        <div class="totals-row">
            <span>Subtotal:</span>
            <span>$${subtotal.toFixed(2)}</span>
        </div>
        <div class="totals-row">
            <span>Tax (7.75%):</span>
            <span>$${tax.toFixed(2)}</span>
        </div>
        <div class="totals-row total">
            <span>Total:</span>
            <span>$${total.toFixed(2)}</span>
        </div>
    `;
}

// Form Management
function clearForm(type) {
    document.getElementById(`${type}Form`).reset();
    document.getElementById(`${type}LineItems`).innerHTML = '';
    document.getElementById(`${type}Totals`).innerHTML = '';
    
    if (type === 'invoice') {
        initializeInvoiceNumber();
    } else if (type === 'quote') {
        initializeQuoteNumber();
    } else if (type === 'workOrder') {
        initializeWorkOrderNumber();
    }
}

// Number Generation
function initializeInvoiceNumber() {
    document.getElementById('invoiceNumber').value = `INV-${nextInvoiceNumber.toString().padStart(4, '0')}`;
}

function initializeQuoteNumber() {
    document.getElementById('quoteNumber').value = `QTE-${nextQuoteNumber.toString().padStart(4, '0')}`;
}

function initializeWorkOrderNumber() {
    if (document.getElementById('workOrderNumber')) {
        document.getElementById('workOrderNumber').value = `WO-${nextWorkOrderNumber.toString().padStart(4, '0')}`;
    }
}

// Form Submissions
document.getElementById('invoiceForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const customerId = document.getElementById('invoiceCustomer').value;
    const customer = customers.find(c => c.id == customerId);
    
    if (!customer) {
        alert('Please select a customer');
        return;
    }
    
    const lineItems = [];
    const lineItemElements = document.querySelectorAll('#invoiceLineItems .line-item');
    
    lineItemElements.forEach(item => {
        const description = item.children[0].querySelector('input').value;
        const quantity = parseFloat(item.children[1].querySelector('input').value) || 0;
        const rate = parseFloat(item.children[2].querySelector('input').value) || 0;
        const total = parseFloat(item.children[3].querySelector('input').value) || 0;
        
        if (description && quantity > 0 && rate > 0) {
            lineItems.push({ description, quantity, rate, total });
        }
    });
    
    if (lineItems.length === 0) {
        alert('Please add at least one line item');
        return;
    }
    
    const subtotal = lineItems.reduce((sum, item) => sum + item.total, 0);
    const tax = subtotal * 0.0775;
    const total = subtotal + tax;
    
    const invoice = {
        id: Date.now(),
        number: document.getElementById('invoiceNumber').value,
        date: document.getElementById('invoiceDate').value,
        dueDate: document.getElementById('invoiceDueDate').value,
        customer: customer,
        description: document.getElementById('invoiceDescription').value,
        lineItems: lineItems,
        subtotal: subtotal,
        tax: tax,
        total: total,
        status: 'draft',
        type: 'invoice'
    };
    
    invoices.push(invoice);
    localStorage.setItem('invoices', JSON.stringify(invoices));
    
    nextInvoiceNumber++;
    localStorage.setItem('nextInvoiceNumber', nextInvoiceNumber);
    
    generateInvoicePreview(invoice);
    clearForm('invoice');
    initializeInvoiceNumber();
});

document.getElementById('quoteForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const customerId = document.getElementById('quoteCustomer').value;
    const customer = customers.find(c => c.id == customerId);
    
    if (!customer) {
        alert('Please select a customer');
        return;
    }
    
    const lineItems = [];
    const lineItemElements = document.querySelectorAll('#quoteLineItems .line-item');
    
    lineItemElements.forEach(item => {
        const description = item.children[0].querySelector('input').value;
        const quantity = parseFloat(item.children[1].querySelector('input').value) || 0;
        const rate = parseFloat(item.children[2].querySelector('input').value) || 0;
        const total = parseFloat(item.children[3].querySelector('input').value) || 0;
        
        if (description && quantity > 0 && rate > 0) {
            lineItems.push({ description, quantity, rate, total });
        }
    });
    
    if (lineItems.length === 0) {
        alert('Please add at least one line item');
        return;
    }
    
    const subtotal = lineItems.reduce((sum, item) => sum + item.total, 0);
    const tax = subtotal * 0.0775;
    const total = subtotal + tax;
    
    const quote = {
        id: Date.now(),
        number: document.getElementById('quoteNumber').value,
        date: document.getElementById('quoteDate').value,
        validUntil: document.getElementById('quoteValidUntil').value,
        customer: customer,
        description: document.getElementById('quoteDescription').value,
        lineItems: lineItems,
        subtotal: subtotal,
        tax: tax,
        total: total,
        status: 'draft',
        type: 'quote'
    };
    
    quotes.push(quote);
    localStorage.setItem('quotes', JSON.stringify(quotes));
    
    nextQuoteNumber++;
    localStorage.setItem('nextQuoteNumber', nextQuoteNumber);
    
    generateQuotePreview(quote);
    clearForm('quote');
    initializeQuoteNumber();
});

// Preview Generation
function generateInvoicePreview(invoice) {
    const preview = document.createElement('div');
    preview.className = 'invoice-preview';
    preview.innerHTML = `
        <div class="invoice-header">
            <div class="invoice-info">
                <h3>INVOICE</h3>
                <p><strong>Invoice #:</strong> ${invoice.number}</p>
                <p><strong>Date:</strong> ${new Date(invoice.date).toLocaleDateString()}</p>
                <p><strong>Due Date:</strong> ${new Date(invoice.dueDate).toLocaleDateString()}</p>
            </div>
            <div class="invoice-info">
                <h3>Bill To:</h3>
                <p><strong>${invoice.customer.firstName} ${invoice.customer.lastName}</strong></p>
                ${invoice.customer.company ? `<p>${invoice.customer.company}</p>` : ''}
                <p>${invoice.customer.address || ''}</p>
                <p>${invoice.customer.city || ''}, ${invoice.customer.state || ''} ${invoice.customer.zip || ''}</p>
                <p>${invoice.customer.email}</p>
                <p>${invoice.customer.phone}</p>
            </div>
        </div>
        
        <div class="form-group">
            <label><strong>Description of Work:</strong></label>
            <p>${invoice.description}</p>
        </div>
        
        <table class="table">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Rate</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                ${invoice.lineItems.map(item => `
                    <tr>
                        <td>${item.description}</td>
                        <td>${item.quantity}</td>
                        <td>$${item.rate.toFixed(2)}</td>
                        <td>$${item.total.toFixed(2)}</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
        
        <div class="totals">
            <div class="totals-row">
                <span>Subtotal:</span>
                <span>$${invoice.subtotal.toFixed(2)}</span>
            </div>
            <div class="totals-row">
                <span>Tax (7.75%):</span>
                <span>$${invoice.tax.toFixed(2)}</span>
            </div>
            <div class="totals-row total">
                <span>Total:</span>
                <span>$${invoice.total.toFixed(2)}</span>
            </div>
        </div>
        
        <div class="legal-disclaimer">
            <p><strong>Payment Terms:</strong> Net 30 days. A 
     